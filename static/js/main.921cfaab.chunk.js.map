{"version":3,"sources":["components/Footer.js","components/Header.js","components/TodoItem.js","components/todosData.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","href","Header","timeOfDay","colorOfDay","hours","Date","getHours","styles","color","style","TodoItem","completedStyle","fontStyle","textDecoration","console","log","this","props","type","checked","item","completed","onChange","handleChange","id","text","React","Component","todosData","App","state","todos","isLoading","bind","setState","updatedTodos","map","todo","todoItems","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mPAWeA,MATf,WACI,OACI,gCACI,uBAAGC,UAAU,aAAb,+BAAoD,uBAAGC,KAAK,gCAAR,qBC4BjDC,MA/Bf,WACI,IAEIC,EACAC,EAFEC,GADO,IAAIC,MACEC,WAIfF,EAAM,IACNF,EAAY,UACZC,EAAa,SAERC,EAAQ,IACbF,EAAY,YACZC,EAAa,UAERC,EAAQ,IACbF,EAAY,UACZC,EAAa,WAGbD,EAAY,QACZC,EAAa,SAGjB,IAAMI,EAAS,CACXC,MAAOL,GAEX,OACA,4BAAQJ,UAAU,SAASU,MAAOF,GAAlC,aAAqDL,ICP1CQ,E,4MAlBXC,eAAiB,CACbC,UAAW,SACXJ,MAAO,UACPK,eAAgB,gB,uDAEV,IAAD,OAEL,OADAC,QAAQC,IAAIC,KAAKC,OAEb,yBAAKlB,UAAU,aACX,2BAAOmB,KAAK,WACZC,QAASH,KAAKC,MAAMG,KAAKC,UACzBC,SAAY,kBAAM,EAAKL,MAAMM,aAAa,EAAKN,MAAMG,KAAKI,OAC1D,uBAAGf,MAAOO,KAAKC,MAAMG,KAAKC,UAAYL,KAAKL,eAAiB,MAAOK,KAAKC,MAAMG,KAAKK,W,GAd5EC,IAAMC,WC0BdC,EA5BG,CACd,CACIJ,GAAI,EACJC,KAAM,qBACNJ,WAAW,GAEf,CACIG,GAAI,EACJC,KAAM,mBACNJ,WAAW,GAEf,CACIG,GAAI,EACJC,KAAM,mBACNJ,WAAW,GAEf,CACIG,GAAI,EACJC,KAAM,WACNJ,WAAW,GAEf,CACIG,GAAI,EACJC,KAAM,mCACNJ,WAAW,IC+CJQ,E,kDA9Db,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAOH,EACPI,WAAW,GAGb,EAAKT,aAAe,EAAKA,aAAaU,KAAlB,gBAPR,E,gEAWZjB,KAAKkB,SAAS,CACZF,WAAW,M,mCAIFR,GACX,IAAMW,EAAenB,KAAKc,MAAMC,MAAMK,KAAI,SAAAC,GAIxC,OAHIA,EAAKb,KAAOA,IACda,EAAKhB,WAAagB,EAAKhB,WAElBgB,KAWTrB,KAAKkB,UAAS,WACZ,MAAO,CACLH,MAAOI,Q,+BAKH,IAAD,OACDG,EAAYtB,KAAKc,MAAMC,MAAMK,KAAI,SAAChB,GAAD,OAAU,kBAAC,EAAD,CAC/CmB,IAAKnB,EAAKI,GACVJ,KAAMA,EACNG,aAAc,EAAKA,kBAGrB,OACE,6BACGP,KAAKc,MAAME,UAAY,uCACtB,6BACE,kBAAC,EAAD,MACA,yBAAKjC,UAAU,aACZuC,GAEH,kBAAC,EAAD,Y,GAvDMZ,IAAMC,WCIJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a","file":"static/js/main.921cfaab.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Footer() {\r\n    return(\r\n        <footer>\r\n            <p className=\"copyright\">Â© 2020, Made with &hearts; <a href=\"https://github.com/ag-piyush\">Piyush Agarwal</a></p> \r\n        </footer>\r\n        \r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react'\r\n\r\nfunction Header() {\r\n    const date = new Date();\r\n    const hours = date.getHours();\r\n    let timeOfDay;\r\n    let colorOfDay;\r\n    \r\n    if (hours<12) {\r\n        timeOfDay = \"morning\";\r\n        colorOfDay = \"white\";\r\n    }\r\n    else if (hours < 17) {\r\n        timeOfDay = \"afternoon\";\r\n        colorOfDay = \"orange\";\r\n    }\r\n    else if (hours < 22){\r\n        timeOfDay = \"evening\";\r\n        colorOfDay = \"purple\";\r\n    }\r\n    else{\r\n        timeOfDay = \"night\";\r\n        colorOfDay = \"black\";\r\n    }\r\n\r\n    const styles = {\r\n        color: colorOfDay\r\n    }\r\n    return (\r\n    <header className=\"navbar\" style={styles}>Hey! Good {timeOfDay}</header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nclass TodoItem extends React.Component {\r\n\r\n    completedStyle = {\r\n        fontStyle: \"italic\",\r\n        color: \"#cdcdcd\",\r\n        textDecoration: \"line-through\"\r\n    }\r\n    render() {\r\n        console.log(this.props);\r\n        return(\r\n            <div className=\"todo-item\">\r\n                <input type=\"checkbox\" \r\n                checked={this.props.item.completed} \r\n                onChange = {() => this.props.handleChange(this.props.item.id)}/>\r\n                <p style={this.props.item.completed ? this.completedStyle : null}>{this.props.item.text}</p>\r\n            </div>\r\n        );\r\n    }    \r\n}\r\n\r\nexport default TodoItem;","const todosData = [\r\n    {\r\n        id: 1,\r\n        text: \"Take out the trash\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Clean gecko tank\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Now lawn\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Catch up on Arrested development\",\r\n        completed: false\r\n    } \r\n];\r\n\r\nexport default todosData;","import React from 'react';\nimport './App.css';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport TodoItem from './components/TodoItem';\nimport todosData from \"./components/todosData\";\n//import Conditional from \"./components/Conditional\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: todosData,\n      isLoading: true\n\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: false\n    })\n  }\n\n  handleChange(id) {\n    const updatedTodos = this.state.todos.map(todo => {\n      if (todo.id === id){\n        todo.completed = !todo.completed\n      }\n      return todo;\n    })\n\n    // this.setState({ \n    //   todos: this.state.todos.map(todo => {\n    //   if (todo.id === id) {\n    //     todo.completed = !todo.completed;\n    //   }\n    //   return todo;\n    // } ) } );\n\n    this.setState(() => {\n      return {\n        todos: updatedTodos\n      }\n    });\n  }\n\n  render() {\n    const todoItems = this.state.todos.map((item) => <TodoItem\n      key={item.id} \n      item={item} \n      handleChange={this.handleChange}/>\n    );\n\n    return (\n      <div>\n        {this.state.isLoading ? <h1>Loading</h1> :\n          <div>\n            <Header />\n            <div className=\"todo-list\">\n              {todoItems}\n            </div>\n            <Footer />\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}