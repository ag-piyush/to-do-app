{"version":3,"sources":["components/Footer.js","components/Header.js","components/LoadingPage.js","components/TodoItem.js","components/TakeData.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","href","Header","timeOfDay","colorOfDay","hours","Date","getHours","styles","color","style","LoadingPage","id","TodoItem","completedStyle","fontStyle","textDecoration","type","checked","this","props","item","completed","onChange","handleChange","text","onClick","onDelete","React","Component","axios","defaults","baseURL","TakeData","state","todos","addItem","bind","get","then","res","setState","data","updatedTodos","map","todo","post","e","_inputElement","value","newItem","prevState","concat","preventDefault","newTodos","filter","URL","delete","todoItems","length","key","onSubmit","ref","a","placeholder","App","isLoading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2TAWeA,MATf,WACI,OACI,gCACI,uBAAGC,UAAU,aAAb,+BAAoD,uBAAGC,KAAK,gCAAR,qBC4BjDC,MA/Bf,WACI,IAEIC,EACAC,EAFEC,GADO,IAAIC,MACEC,WAIfF,EAAM,IACNF,EAAY,UACZC,EAAa,SAERC,EAAQ,IACbF,EAAY,YACZC,EAAa,UAERC,EAAQ,IACbF,EAAY,UACZC,EAAa,WAGbD,EAAY,QACZC,EAAa,SAGjB,IAAMI,EAAS,CACXC,MAAOL,GAEX,OACA,4BAAQJ,UAAU,SAASU,MAAOF,GAAlC,aAAqDL,I,MClB1CQ,MARf,WACI,OACI,yBAAKC,GAAG,iBAAiBZ,UAAU,SAC/B,yBAAKY,GAAG,a,OCoBLC,E,4MAtBXC,eAAiB,CACbC,UAAW,SACXN,MAAO,UACPO,eAAgB,gB,uDAEV,IAAD,OACL,OACI,yBAAKhB,UAAU,aACX,2BAAOiB,KAAK,WACZC,QAASC,KAAKC,MAAMC,KAAKC,UACzBC,SAAY,kBAAM,EAAKH,MAAMI,aAAa,EAAKJ,MAAMC,KAAKT,OAC1D,6BACI,uBAAGZ,UAAU,OAAOU,MAAOS,KAAKC,MAAMC,KAAKC,UAAYH,KAAKL,eAAiB,MAAOK,KAAKC,MAAMC,KAAKI,OAExG,yBAAKzB,UAAU,SACX,4BAAQA,UAAU,eAAe0B,QAAW,kBAAM,EAAKN,MAAMO,SAAS,EAAKP,MAAMC,KAAKT,a,GAjBnFgB,IAAMC,W,wBCG7BC,IAAMC,SAASC,QAAU,6C,IAqGVC,E,kDAlGX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,MAAO,IAEX,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKb,aAAe,EAAKA,aAAaa,KAAlB,gBACpB,EAAKV,SAAW,EAAKA,SAASU,KAAd,gBAPN,E,gEAUO,IAAD,OACtBP,IAAMQ,IAAI,SAASC,MAAK,SAAAC,GACvB,EAAKC,SAAS,CAAEN,MAAOK,EAAIE,Y,mCAKb9B,GACT,IAAM+B,EAAexB,KAAKe,MAAMC,MAAMS,KAAI,SAAAC,GAStC,OARIA,EAAKjC,KAAOA,IACZiC,EAAKvB,WAAauB,EAAKvB,UACvBQ,IAAMgB,KAAK,QAAS,CAChBlC,GAAIiC,EAAKjC,GACTa,KAAMoB,EAAKpB,KACXH,UAAWuB,EAAKvB,aAGjBuB,KAEX1B,KAAKsB,UAAS,WACV,MAAO,CACHN,MAAOQ,Q,8BAKXI,GACJ,GAAiC,KAA7B5B,KAAK6B,cAAcC,MAAc,CACjC,IAAIC,EAAU,CACVzB,KAAMN,KAAK6B,cAAcC,MACzB3B,WAAW,GAGfQ,IAAMgB,KAAK,QAAS,CAChBrB,KAAMyB,EAAQzB,KACdH,UAAW4B,EAAQ5B,YAGvBH,KAAKsB,UAAS,SAACU,GACX,MAAO,CACHhB,MAAOgB,EAAUhB,MAAMiB,OAAOF,OAItC/B,KAAK6B,cAAcC,MAAQ,GAG/BF,EAAEM,mB,+BAEGzC,GACL,IAAM0C,EAAWnC,KAAKe,MAAMC,MAAMoB,QAAO,SAAClC,GAAD,OAAUA,EAAKT,KAAOA,KAEzD4C,EAAG,gBAAY5C,GAC3BkB,IAAM2B,OAAOD,GAEPrC,KAAKsB,UAAS,WACV,MAAO,CACHN,MAAOmB,Q,+BAIT,IAAD,OACCI,EAAyC,IAA5BvC,KAAKe,MAAMC,MAAMwB,OAAgB,8BAAc,yBAAK3D,UAAU,aAAf,IAA8BmB,KAAKe,MAAMC,MAAMS,KAAI,SAACvB,GAAD,OAAU,kBAAC,EAAD,CAC3HuC,IAAKvC,EAAKT,GACVS,KAAMA,EACNG,aAAc,EAAKA,aACnBG,SAAU,EAAKA,cAJ+C,KAQlE,OACI,6BACI,yBAAK3B,UAAU,6CACX,0BAAM6D,SAAU1C,KAAKiB,SACjB,2BACInB,KAAK,OACL6C,IAAK,SAACC,GAAD,OAAO,EAAKf,cAAgBe,GACjCC,YAAY,sBAEhB,4BAAQ/C,KAAK,UAAb,eAGPyC,O,GA7FM7B,aC+BRoC,E,kDA9Bb,aAAe,IAAD,8BACZ,gBACK/B,MAAQ,CACXgC,WAAW,GAHD,E,gEASZ/C,KAAKsB,SAAS,CACZyB,WAAW,M,+BAKb,OACE,6BACG/C,KAAKe,MAAMgC,UACV,kBAAC,EAAD,MACA,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GAvBMtC,IAAMC,WCKJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1fb8cbf0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Footer() {\r\n    return(\r\n        <footer>\r\n            <p className=\"copyright\">Â© 2020, Made with &hearts; <a href=\"https://github.com/ag-piyush\">Piyush Agarwal</a></p> \r\n        </footer>\r\n        \r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react'\r\n\r\nfunction Header() {\r\n    const date = new Date();\r\n    const hours = date.getHours();\r\n    let timeOfDay;\r\n    let colorOfDay;\r\n    \r\n    if (hours<12) {\r\n        timeOfDay = \"morning\";\r\n        colorOfDay = \"white\";\r\n    }\r\n    else if (hours < 17) {\r\n        timeOfDay = \"afternoon\";\r\n        colorOfDay = \"orange\";\r\n    }\r\n    else if (hours < 22){\r\n        timeOfDay = \"evening\";\r\n        colorOfDay = \"purple\";\r\n    }\r\n    else{\r\n        timeOfDay = \"night\";\r\n        colorOfDay = \"black\";\r\n    }\r\n\r\n    const styles = {\r\n        color: colorOfDay\r\n    }\r\n    return (\r\n    <header className=\"navbar\" style={styles}>Hey! Good {timeOfDay}</header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport './LoadingPage.css';\r\n\r\nfunction LoadingPage() {\r\n    return(\r\n        <div id=\"loader-wrapper\" className=\"trans\">\r\n            <div id=\"loader\"></div>\r\n        </div>        \r\n    );\r\n}\r\n\r\nexport default LoadingPage;","import React from 'react';\r\n\r\nclass TodoItem extends React.Component {\r\n\r\n    completedStyle = {\r\n        fontStyle: \"italic\",\r\n        color: \"#cdcdcd\",\r\n        textDecoration: \"line-through\"\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"todo-item\">\r\n                <input type=\"checkbox\" \r\n                checked={this.props.item.completed} \r\n                onChange = {() => this.props.handleChange(this.props.item.id)}/>\r\n                <div>\r\n                    <p className=\"text\" style={this.props.item.completed ? this.completedStyle : null}>{this.props.item.text}</p>\r\n                </div>\r\n                <div className=\"close\">\r\n                    <button className=\"close-button\" onClick = {() => this.props.onDelete(this.props.item.id)}></button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }    \r\n}\r\n\r\nexport default TodoItem;","import React, {Component} from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport './TakeData.css';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = \"https://aqueous-cliffs-31660.herokuapp.com\";\r\n\r\nclass TakeData extends Component{\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            todos: []\r\n        }\r\n        this.addItem = this.addItem.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n\t\taxios.get(\"/todo\").then(res => {\r\n\t\t\tthis.setState({ todos: res.data });\r\n            \r\n\t\t});\r\n\t}\r\n\r\n    handleChange(id) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if (todo.id === id){\r\n                todo.completed = !todo.completed\r\n                axios.post('/todo', {\r\n                    id: todo.id,\r\n                    text: todo.text,\r\n                    completed: todo.completed\r\n                })\r\n            }\r\n            return todo\r\n        })\r\n        this.setState(() => {\r\n            return {\r\n                todos: updatedTodos\r\n            }\r\n        });\r\n    }\r\n\r\n    addItem(e) {\r\n        if (this._inputElement.value !== \"\") {\r\n            var newItem = {\r\n                text: this._inputElement.value,\r\n                completed: false\r\n            };\r\n\r\n            axios.post('/todo', {\r\n                text: newItem.text,\r\n                completed: newItem.completed\r\n            })\r\n\r\n            this.setState((prevState) => {\r\n                return {\r\n                    todos: prevState.todos.concat(newItem)\r\n                };\r\n            });\r\n    \r\n            this._inputElement.value = \"\";\r\n        }\r\n    \r\n        e.preventDefault();\r\n    }\r\n    onDelete(id) {\r\n        const newTodos = this.state.todos.filter((item) => item.id !== id);\r\n        \r\n        const URL = `/todo/${id}`;\r\n\t\taxios.delete(URL);\r\n        \r\n        this.setState(() => {\r\n            return {\r\n                todos: newTodos\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        const todoItems = (this.state.todos.length === 0) ? <div></div> : <div className=\"todo-list\"> { this.state.todos.map((item) => <TodoItem\r\n            key={item.id} \r\n            item={item} \r\n            handleChange={this.handleChange}\r\n            onDelete={this.onDelete}/> \r\n        )\r\n    } </div>\r\n\r\n        return(\r\n            <div>\r\n                <div className=\"formDec rounded-input border-bottom-input\">\r\n                    <form onSubmit={this.addItem}>\r\n                        <input\r\n                            type=\"text\"\r\n                            ref={(a) => this._inputElement = a}\r\n                            placeholder=\"Insert your text!\">\r\n                        </input>\r\n                        <button type=\"submit\">Add Task!</button>\r\n                    </form>\r\n                </div>\r\n                {todoItems}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TakeData;","import React from 'react';\r\nimport './App.css';\r\nimport Footer from './components/Footer';\r\nimport Header from './components/Header';\r\nimport LoadingPage from \"./components/LoadingPage\";\r\nimport TakeData from './components/TakeData';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isLoading: true\r\n\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      isLoading: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.isLoading ? \r\n          <LoadingPage />:\r\n          <div>\r\n            <Header />\r\n            <TakeData />\r\n            <Footer />\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}