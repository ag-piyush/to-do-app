{"version":3,"sources":["components/Footer.js","components/Header.js","components/LoadingPage.js","components/TodoItem.js","components/TakeData.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","href","Header","timeOfDay","colorOfDay","hours","Date","getHours","styles","color","style","LoadingPage","id","TodoItem","completedStyle","fontStyle","textDecoration","this","props","items","length","type","checked","item","completed","onChange","handleChange","text","React","Component","TakeData","state","todos","addItem","bind","updatedTodos","map","todo","setState","e","_inputElement","value","newItem","now","prevState","concat","console","log","preventDefault","todoItems","key","onSubmit","ref","a","placeholder","App","isLoading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5522e825.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Footer() {\r\n    return(\r\n        <footer>\r\n            <p className=\"copyright\">Â© 2020, Made with &hearts; <a href=\"https://github.com/ag-piyush\">Piyush Agarwal</a></p> \r\n        </footer>\r\n        \r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react'\r\n\r\nfunction Header() {\r\n    const date = new Date();\r\n    const hours = date.getHours();\r\n    let timeOfDay;\r\n    let colorOfDay;\r\n    \r\n    if (hours<12) {\r\n        timeOfDay = \"morning\";\r\n        colorOfDay = \"white\";\r\n    }\r\n    else if (hours < 17) {\r\n        timeOfDay = \"afternoon\";\r\n        colorOfDay = \"orange\";\r\n    }\r\n    else if (hours < 22){\r\n        timeOfDay = \"evening\";\r\n        colorOfDay = \"purple\";\r\n    }\r\n    else{\r\n        timeOfDay = \"night\";\r\n        colorOfDay = \"black\";\r\n    }\r\n\r\n    const styles = {\r\n        color: colorOfDay\r\n    }\r\n    return (\r\n    <header className=\"navbar\" style={styles}>Hey! Good {timeOfDay}</header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport './LoadingPage.css';\r\n\r\nfunction LoadingPage() {\r\n    return(\r\n        <div id=\"loader-wrapper\" className=\"trans\">\r\n            <div id=\"loader\"></div>\r\n        </div>        \r\n    );\r\n}\r\n\r\nexport default LoadingPage;","import React from 'react';\r\n\r\nclass TodoItem extends React.Component {\r\n\r\n    completedStyle = {\r\n        fontStyle: \"italic\",\r\n        color: \"#cdcdcd\",\r\n        textDecoration: \"line-through\"\r\n    }\r\n    render() {\r\n        if (this.props.items.length == 0) {\r\n            return (\r\n                <div></div>\r\n            )\r\n        }\r\n        return(\r\n            <div className=\"todo-item\">\r\n                <input type=\"checkbox\" \r\n                checked={this.props.item.completed} \r\n                onChange = {() => this.props.handleChange(this.props.item.id)}/>\r\n                <p style={this.props.item.completed ? this.completedStyle : null}>{this.props.item.text}</p>\r\n            </div>\r\n        );\r\n    }    \r\n}\r\n\r\nexport default TodoItem;","import React, {Component} from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport './TakeData.css';\r\n\r\nclass TakeData extends Component{\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            todos: []\r\n        }\r\n        this.addItem = this.addItem.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(id) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if (todo.id === id){\r\n                todo.completed = !todo.completed\r\n            }\r\n            return todo\r\n        })\r\n        this.setState(() => {\r\n            return {\r\n                todos: updatedTodos\r\n            }\r\n        });\r\n    }\r\n    addItem(e) {\r\n        if (this._inputElement.value !== \"\") {\r\n            var newItem = {\r\n                text: this._inputElement.value,\r\n                id: Date.now(),\r\n                completed: false\r\n            };\r\n    \r\n            this.setState((prevState) => {\r\n                return {\r\n                    todos: prevState.todos.concat(newItem)\r\n                };\r\n            });\r\n    \r\n            this._inputElement.value = \"\";\r\n        }\r\n    \r\n        console.log(this.state.todos);\r\n    \r\n        e.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        const todoItems = this.state.todos.map((item) => <TodoItem\r\n            key={item.id} \r\n            item={item} \r\n            handleChange={this.handleChange}/>\r\n        );\r\n\r\n        return(\r\n            <div>\r\n                <div className=\"formDec rounded-input border-bottom-input\">\r\n                    <form onSubmit={this.addItem}>\r\n                        <input\r\n                            type=\"text\"\r\n                            ref={(a) => this._inputElement = a}\r\n                            placeholder=\"Insert your text!\">\r\n                        </input>\r\n                        <button type=\"submit\">Add Task!</button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"todo-list\">\r\n                    {todoItems}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TakeData;","import React from 'react';\nimport './App.css';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport LoadingPage from \"./components/LoadingPage\";\nimport TakeData from './components/TakeData';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: true\n\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: false\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.isLoading ? \n          <LoadingPage />:\n          <div>\n            <Header />\n            <TakeData />\n            <Footer />\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}